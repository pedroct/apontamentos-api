name: Build & Deploy (EC2)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      deploy_strategy:
        description: "Estratégia de deploy"
        type: choice
        required: true
        default: ssh
        options: [ ssh, rsync ]

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io

jobs:
  build:
    name: Build & Push Image to GHCR
    runs-on: ubuntu-latest
    outputs:
      image_uri: ${{ steps.meta.outputs.image_uri }}
      tag_latest: ${{ steps.meta.outputs.tag_latest }}
      tag_stamp: ${{ steps.meta.outputs.tag_stamp }}
    steps:
      - uses: actions/checkout@v4

      - id: meta
        shell: bash
        run: |
          REPO_LOWER="${GITHUB_REPOSITORY,,}"
          echo "image_uri=${{ env.REGISTRY }}/${REPO_LOWER}" >> "$GITHUB_OUTPUT"
          echo "tag_latest=prod-latest"                     >> "$GITHUB_OUTPUT"
          echo "tag_stamp=prod-$(date -u +%Y%m%d%H%M)"      >> "$GITHUB_OUTPUT"

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Login to GHCR (builder)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ steps.meta.outputs.image_uri }}:${{ steps.meta.outputs.tag_latest }}
            ${{ steps.meta.outputs.image_uri }}:${{ steps.meta.outputs.tag_stamp }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy_ssh:
    name: Deploy via SSH (appleboy)
    environment: production
    needs: build
    if: ${{ github.event_name == 'push' || inputs.deploy_strategy == 'ssh' }}
    runs-on: ubuntu-latest
    steps:
      - name: Executa deploy na EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script_stop: true
          script: |
            set -euo pipefail
            # Vars do Environment production
            export APP_DIR="${{ vars.APP_DIR }}"
            export ENVFILE="${{ vars.ENVFILE }}"
            export COMPOSE="${{ vars.COMPOSE }}"
            export DB_SERVICE="${{ vars.DB_SERVICE }}"
            export API_SERVICE="${{ vars.API_SERVICE }}"
            export HEALTH_LOCAL="${{ vars.HEALTH_LOCAL }}"
            export READY_LOCAL="${{ vars.READY_LOCAL }}"
            export HEALTH_PUBLIC="${{ vars.HEALTH_URL }}"
            export WAIT_DB_RETRIES="${{ vars.WAIT_DB_RETRIES }}"
            export WAIT_DB_INTERVAL="${{ vars.WAIT_DB_INTERVAL }}"
            export NGINX_RELOAD="${{ vars.NGINX_RELOAD }}"
            export CURL_INSECURE="${{ vars.CURL_INSECURE }}"
            # Secrets p/ docker pull
            export GHCR_USER="${{ secrets.GHCR_USER }}"
            export GHCR_PAT="${{ secrets.GHCR_PAT }}"

            # Login GHCR (não-interativo)
            if [ -n "${GHCR_USER:-}" ] && [ -n "${GHCR_PAT:-}" ]; then
              echo "$GHCR_PAT" | docker login ghcr.io -u "$GHCR_USER" --password-stdin || true
            fi

            chmod +x "${APP_DIR:-/home/pedroct/apps/apontamentos-api}/deploy.sh"
            "${APP_DIR:-/home/pedroct/apps/apontamentos-api}/deploy.sh"

  deploy_rsync:
    name: Deploy via RSYNC + SSH
    environment: production
    needs: build
    if: ${{ github.event_name == 'push' || inputs.deploy_strategy == 'rsync' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: RSYNC para EC2
        uses: burnett01/rsync-deploy@5.2
        with:
          switches: -avzr --delete
          path: |
            docker-compose.prod.yml
            deploy.sh
            alembic.ini
            alembic/versions/
          remote_path: ${{ vars.APP_DIR }}
          remote_host: ${{ secrets.SSH_HOST }}
          remote_user: ${{ secrets.SSH_USER }}
          remote_key: ${{ secrets.SSH_KEY }}
          remote_port: ${{ secrets.SSH_PORT || 22 }}

      - name: Executa deploy na EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script_stop: true
          script: |
            set -euo pipefail
            export APP_DIR="${{ vars.APP_DIR }}"
            export GHCR_USER="${{ secrets.GHCR_USER }}"
            export GHCR_PAT="${{ secrets.GHCR_PAT }}"
            [ -n "${GHCR_USER:-}" ] && [ -n "${GHCR_PAT:-}" ] && \
              echo "$GHCR_PAT" | docker login ghcr.io -u "$GHCR_USER" --password-stdin || true
            chmod +x "$APP_DIR/deploy.sh" && cd "$APP_DIR" && ./deploy.sh
