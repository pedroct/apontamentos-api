name: Deploy to Production

permissions:
  contents: read
  packages: write

on:
  push:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  IMAGE: ghcr.io/${{ github.repository }}
  PUBLIC_HEALTH_URL: https://api-apontamentos.pedroct.com.br/healthz

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GHCR (PAT)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build & Push image
        run: |
          docker build -t "${IMAGE}:${GITHUB_SHA}" -t "${IMAGE}:latest" .
          docker push "${IMAGE}:${GITHUB_SHA}"
          docker push "${IMAGE}:latest"

      - name: Check SSH connectivity
        run: |
          set -euxo pipefail
          getent ahostsv4 "${{ secrets.SSH_HOST }}" || true
          # tenta TCP connect (10s)
          timeout 10 bash -c "exec 3<>/dev/tcp/${{ secrets.SSH_HOST }}/22" && echo "TCP 22 open" || (echo "TCP 22 closed" && exit 1)

      - name: SSH into server and deploy
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: 22
          timeout: 2m
          command_timeout: 15m
          script: |
            set -euo pipefail
            APP_DIR="/home/pedroct/apps/apontamentos-api"
            echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin
            cd "$APP_DIR"
            docker compose pull
            docker compose up -d --remove-orphans
            docker image prune -f
            # health local (backend)
            for i in {1..30}; do
              curl -fsS http://127.0.0.1:8000/healthz && break || sleep 2
            done

      - name: Public smoke test (HTTPS)
        run: |
          for i in {1..30}; do
            code=$(curl -sk -o /dev/null -w "%{http_code}" "${PUBLIC_HEALTH_URL}")
            if [ "$code" = "200" ]; then
              echo "OK ${PUBLIC_HEALTH_URL}"
              curl -fsS "${PUBLIC_HEALTH_URL}"
              exit 0
            fi
            sleep 2
          done
          echo "Falha no smoke test p√∫blico em ${PUBLIC_HEALTH_URL}"
          exit 1
