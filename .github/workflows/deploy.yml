name: Deploy to Production

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  IMAGE: ghcr.io/${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ github.sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE }}
          tags: |
            type=raw,value=prod-latest
            type=sha,format=short

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment:
      name: production
      url: ${{ secrets.PUBLIC_HEALTH_URL }}
    steps:
      - name: Derive repo vars
        id: prep
        run: |
          IFS='/' read -r OWNER REPO <<< "${GITHUB_REPOSITORY}"
          echo "OWNER=$OWNER" >> $GITHUB_OUTPUT
          echo "REPO=$REPO" >> $GITHUB_OUTPUT

      - name: SSH | Pull & Restart
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_SSH_PORT }}
          script_stop: true
          script: |
            set -euxo pipefail

            export COMPOSE_DIR="${{ secrets.COMPOSE_DIR || '/home/pedroct/apps/apontamentos-api' }}"
            export GITHUB_OWNER="${{ steps.prep.outputs.OWNER }}"
            export GITHUB_REPO="${{ steps.prep.outputs.REPO }}"
            export IMAGE_TAG="${{ needs.build-and-push.outputs.sha }}"

            cd "$COMPOSE_DIR"

            # login no GHCR (imagens privadas)
            echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u "${{ secrets.PROD_GHCR_USER }}" --password-stdin

            # valida compose
            env | grep -E '^(GITHUB_OWNER|GITHUB_REPO|IMAGE_TAG)=' || true
            docker compose -f docker-compose.prod.yml config >/dev/null

            # puxa imagem pela tag do commit SHA
            docker compose -f docker-compose.prod.yml pull api

            # sobe/atualiza serviço
            docker compose -f docker-compose.prod.yml up -d --remove-orphans

            # migrações (se Alembic estiver no container)
            docker compose -f docker-compose.prod.yml run --rm api alembic upgrade head || true

            # limpeza básica
            docker image prune -f || true

      - name: Public healthcheck
        run: |
          for i in {1..20}; do
            code=$(curl -ks -o /dev/null -w "%{http_code}" "${{ secrets.PUBLIC_HEALTH_URL }}")
            if [ "$code" = "200" ]; then
              echo "OK: healthcheck passou."
              exit 0
            fi
            echo "Aguardando saúde (tentativa $i)..."
            sleep 6
          done
          echo "FALHA: healthcheck não retornou 200."
          exit 1
