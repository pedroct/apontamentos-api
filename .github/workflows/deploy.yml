name: Deploy to Production

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  IMAGE: ghcr.io/${{ github.repository }}
  GHCR_USERNAME: ${{ github.actor }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      short_sha: ${{ steps.vars.outputs.short_sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute short SHA
        id: vars
        run: echo "short_sha=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE }}
          tags: |
            type=raw,value=prod-latest
            # publica também sha-<short>
            type=sha,format=short
          labels: |
            org.opencontainers.image.source=${{ github.repository }}

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment:
      name: production
    env:
      PUBLIC_HEALTH_URL: ${{ secrets.PUBLIC_HEALTH_URL }}
      # token com permissão de read:packages no GHCR
      GHCR_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Derive repo vars
        id: prep
        run: |
          IFS='/' read -r OWNER REPO <<< "${GITHUB_REPOSITORY}"
          echo "owner=$OWNER" >> $GITHUB_OUTPUT
          echo "repo=$REPO" >> $GITHUB_OUTPUT
          echo "short_sha=${{ needs.build-and-push.outputs.short_sha }}" >> $GITHUB_OUTPUT

      - name: Cache server host key (port 2222)
        shell: bash
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -p 2222 "api-apontamentos.pedroct.com.br" >> ~/.ssh/known_hosts

      - name: Check SSH connectivity (TCP 2222)
        shell: bash
        run: |
          set -euxo pipefail
          getent ahostsv4 "api-apontamentos.pedroct.com.br" || true
          timeout 10 bash -c "exec 3<>/dev/tcp/api-apontamentos.pedroct.com.br/2222" && echo "TCP 2222 open"

      - name: SSH | Pull & Restart
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: 2222
          script_stop: true
          timeout: 5m
          command_timeout: 20m
          debug: true
          envs: GHCR_USERNAME,GHCR_TOKEN
          script: |
            set -euxo pipefail

            COMPOSE_DIR="${{ secrets.COMPOSE_DIR }}"
            if [ -z "$COMPOSE_DIR" ]; then COMPOSE_DIR="/home/pedroct/apps/apontamentos-api"; fi

            GITHUB_OWNER="${{ steps.prep.outputs.owner }}"
            GITHUB_REPO="${{ steps.prep.outputs.repo }}"
            SHORT_SHA="${{ steps.prep.outputs.short_sha }}"
            IMAGE_TAG="prod-latest"

            cd "$COMPOSE_DIR"

            # login no GHCR (imagens privadas)
            echo "${GHCR_TOKEN}" | docker login ghcr.io -u "${GHCR_USERNAME}" --password-stdin

            echo "Verificando tag: ghcr.io/${GITHUB_OWNER}/${GITHUB_REPO}:${IMAGE_TAG}"
            if ! docker manifest inspect "ghcr.io/${GITHUB_OWNER}/${GITHUB_REPO}:${IMAGE_TAG}" >/dev/null 2>&1; then
              echo "prod-latest ausente; tentando fallback para sha-${SHORT_SHA}"
              if docker manifest inspect "ghcr.io/${GITHUB_OWNER}/${GITHUB_REPO}:sha-${SHORT_SHA}" >/dev/null 2>&1; then
                IMAGE_TAG="sha-${SHORT_SHA}"
              else
                echo "Nenhuma tag válida encontrada (prod-latest nem sha-${SHORT_SHA})."
                exit 1
              fi
            fi

            export GITHUB_OWNER GITHUB_REPO IMAGE_TAG
            docker compose -f docker-compose.prod.yml config >/dev/null

            docker compose -f docker-compose.prod.yml pull api
            docker compose -f docker-compose.prod.yml up -d --remove-orphans

            docker compose -f docker-compose.prod.yml run --rm api alembic upgrade head || true

            docker image prune -f || true

      - name: Public healthcheck
        run: |
          URL="${PUBLIC_HEALTH_URL:-https://api-apontamentos.pedroct.com.br/healthz}"
          echo "Checando: $URL"
          for i in {1..20}; do
            code=$(curl -ks -o /dev/null -w "%{http_code}" "$URL")
            if [ "$code" = "200" ]; then
              echo "OK: healthcheck passou."
              exit 0
            fi
            echo "Aguardando saúde (tentativa $i)..."
            sleep 6
          done
          echo "FALHA: healthcheck não retornou 200."
          exit 1
